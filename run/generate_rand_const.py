#!/usr/bin/env python3
# generate_rand_const.py

import re
import sys
import os

def parse_vtop_header(vtop_path):
    """Parse Vtop.h to extract input ports (excluding clk)"""
    with open(vtop_path, 'r') as f:
        content = f.read()

    # Match sc_in declarations (ignore clk)
    port_pattern = r'sc_core::sc_in<([^>]+)> &(\w+);'
    ports = []
    for match in re.finditer(port_pattern, content):
        data_type = match.group(1).strip()
        name = match.group(2)
        if name == 'clk':
            continue  # Skip clock
        ports.append({'name': name, 'type': data_type})
    return ports

def get_default_range(port_name, port_type):
    """Get default min/max values based on port name and type"""
    # Handle boolean types
    if port_type == 'bool':
        return (0, 1)
    
    # Handle reset signals
    if 'rst' in port_name.lower() or 'reset' in port_name.lower():
        return (0, 1)
    
    # Handle operation codes
    if 'op' in port_name.lower() or 'opcode' in port_name.lower():
        return (0, 15)  # 4-bit by default
    
    # Handle address signals
    if 'addr' in port_name.lower() or 'address' in port_name.lower():
        return (0, 1023)  # 10-bit address space
    
    # Handle data signals
    if 'data' in port_name.lower() or port_name in ['d', 'c']:
        return (0, 255)  # 8-bit data by default
    
    # Handle ALU operands (a, b)
    if port_name in ['a', 'b']:
        return (0, 500)  # Your original range for a/b
    
    # Default range for other signals
    return (0, 100)

def generate_rand_const_h(output_path):
    """Generate rand_const.h"""
    template = """// AUTO-GENERATED by generate_rand_const.py
// DO NOT EDIT MANUALLY

#ifndef RAND_CONST_H
#define RAND_CONST_H

#include <map>
#include <string>
#include <utility> // for std::pair

struct RandConstraints {
    // Declaration only
    static std::map<std::string, std::pair<double, double>> constraints;
};

#endif // RAND_CONST_H
"""
    
    with open(output_path, 'w') as f:
        f.write(template)

def generate_rand_const_cpp(ports, output_path):
    """Generate rand_const.cpp with dynamic constraints"""
    constraints = []
    
    for port in ports:
        name = port['name']
        min_val, max_val = get_default_range(name, port['type'])
        constraints.append(f'    {{"{name}", {{{min_val}, {max_val}}}}}')
    
    constraints_str = ",\n".join(constraints)
    
    template = f"""// AUTO-GENERATED by generate_rand_const.py
// DO NOT EDIT MANUALLY

#include "rand_const.h"

// Definition: only once in the entire program
std::map<std::string, std::pair<double, double>> RandConstraints::constraints = {{
{constraints_str}
}};
"""
    
    with open(output_path, 'w') as f:
        f.write(template)

if __name__ == "__main__":
    if len(sys.argv) != 4:
        print("Usage: python3 generate_rand_const.py <Vtop.h path> <rand_const.h> <rand_const.cpp>")
        sys.exit(1)
    
    vtop_path = sys.argv[1]
    rand_const_h_path = sys.argv[2]
    rand_const_cpp_path = sys.argv[3]
    
    if not os.path.exists(vtop_path):
        print(f"Error: {vtop_path} not found!")
        sys.exit(1)
    
    ports = parse_vtop_header(vtop_path)
    print(f"Found {len(ports)} input ports (excluding clk):")
    for p in ports:
        min_val, max_val = get_default_range(p['name'], p['type'])
        print(f"  - {p['name']} ({p['type']}) → range [{min_val}, {max_val}]")
    
    generate_rand_const_h(rand_const_h_path)
    generate_rand_const_cpp(ports, rand_const_cpp_path)
    
    print(f"✅ Generated {rand_const_h_path}")
    print(f"✅ Generated {rand_const_cpp_path}")