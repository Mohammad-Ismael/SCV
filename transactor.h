// AUTO-GENERATED by generate_verification.py
// DO NOT EDIT MANUALLY

#ifndef TRANSACTOR_H
#define TRANSACTOR_H

#include <systemc>
#include <tlm>
#include <tlm_utils/simple_target_socket.h>
#include <iostream>  //
#include "custom_data.h"
#include "debug.h"
#include "verilated/obj_dir/Vtop.h"
#include "timing_controller.h"
#include "comparator.h"
#include "output_struct.h"

using namespace std;  //
using namespace sc_core;

SC_MODULE(Transactor)
{
    tlm_utils::simple_target_socket<Transactor> socket;
    tlm_utils::simple_initiator_socket<Transactor> socket_comparator;
    Vtop* rtl = nullptr;
    TimingController* tc = nullptr;

    // Auto-generated signals


    SC_CTOR(Transactor) : socket_comparator("socket_comparator")
    {
        socket.register_b_transport(this, &Transactor::b_transport);
    }

    void set_timing_controller(TimingController* controller) {
        if (tc != nullptr) {
            SC_REPORT_ERROR("Transactor", "Timing controller already set!");
            return;
        }
        tc = controller;
        rtl = new Vtop("rtl");

    }

    void b_transport(tlm::tlm_generic_payload& trans, sc_core::sc_time& delay)
    {
        if (trans.get_command() == tlm::TLM_WRITE_COMMAND)
        {
            if (rtl == nullptr) {
                SC_REPORT_ERROR("Transactor", "RTL not initialized!");
                return;
            }

            auto data = CustomData::deserialize(trans.get_data_ptr());


            if constexpr (DEBUG_TLM) {
                cout << "\n\033[1;31mIIIII===================  Inside Transactor  ====================IIIII\033[0m" << endl;
                std::cout << "\033[1;31m"
                          << sc_time_stamp()
                          << " | Transactor | TLM | Driving RTL..."
                          << data
                          << "\033[0m" << endl;
            }

            tc->inputs_ready_event.notify();
            wait(tc->outputs_ready_event);



            if constexpr (DEBUG_RTL) {
                std::cout << "\033[1;31m"
                          << sc_time_stamp()
                          << " | Transactor | RTL Outputs:"
                          << "\033[0m" << std::endl;
                std::cout << "\033[1;31mIIIII===================  RTL Process Completed  ====================IIIII\033[0m\n"
                     << std::endl;
            }
        }
        trans.set_response_status(tlm::TLM_OK_RESPONSE);
    }

    void send_to_comparator(const OutputStruct& output)
    {
        tlm_generic_payload trans;
        sc_time delay = SC_ZERO_TIME;
        trans.set_data_ptr(reinterpret_cast<unsigned char*>(const_cast<OutputStruct*>(&output)));
        trans.set_data_length(sizeof(OutputStruct));
        trans.set_command(TLM_WRITE_COMMAND);
        trans.set_response_status(TLM_INCOMPLETE_RESPONSE);
        socket_comparator->b_transport(trans, delay);
    }

    ~Transactor() {
        delete rtl;
    }
};

#endif // TRANSACTOR_H
